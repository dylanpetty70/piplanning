{"ast":null,"code":"import { databaseRef } from '../firebaseAPI';\nexport const GRAB_TEMPLATE_SIMULATION = 'GRAB_TEMPLATE_SIMULATION';\nexport const GRAB_TEMPLATE_SIMULATION_OPTIONS = 'GRAB_TEMPLATE_SIMULATION_OPTIONS';\nexport const GRAB_ACTIVE_SIMULATION = 'GRAB_ACTIVE_SIMULATION';\nexport const GRAB_ACTIVE_SIMULATION_OPTIONS = 'GRAB_ACTIVE_SIMULATION_OPTIONS';\nexport const handleGrabTemplateSimulation = sim => async dispatch => {\n  await databaseRef.child(\"templateSimulations/\" + sim).on(\"value\", snapshot => {\n    if (snapshot.val() !== null) {\n      dispatch({\n        type: GRAB_TEMPLATE_SIMULATION,\n        data: snapshot.val()\n      });\n    } else {\n      dispatch({\n        type: GRAB_TEMPLATE_SIMULATION,\n        data: {}\n      });\n    }\n  });\n};\nexport const handleGrabTemplateSimulationOptions = () => async dispatch => {\n  await databaseRef.child(\"templateSimulations/options\").on(\"value\", snapshot => {\n    if (snapshot.val() !== null) {\n      dispatch({\n        type: GRAB_TEMPLATE_SIMULATION_OPTIONS,\n        data: snapshot.val()\n      });\n    } else {\n      dispatch({\n        type: GRAB_TEMPLATE_SIMULATION_OPTIONS,\n        data: {}\n      });\n    }\n  });\n};\nexport const handleNewTemplateSimulation = name => async dispatch => {\n  let newSimulationKey = databaseRef.child(\"templateSimulations\").push().key;\n  let data = {\n    name: name,\n    key: newSimulationKey\n  };\n  let simulationPath = \"templateSimulations/\" + String(newSimulationKey);\n  let optionPath = \"templateSimulations/options/\" + String(newSimulationKey);\n  await databaseRef.update({\n    [optionPath]: name\n  });\n  await databaseRef.update({\n    [simulationPath]: data\n  });\n};\nexport const handleNewActiveSimulation = (name, sim) => async dispatch => {\n  await databaseRef.child(\"templateSimulations/\" + sim).once('value').then(async function (snapshot) {\n    let data = snapshot.val();\n    data.activeName = name;\n    let newSimulationKey = databaseRef.child(\"activeSimulations\").push().key;\n    data.key = newSimulationKey;\n    let simulationPath = \"activeSimulations/\" + String(newSimulationKey);\n    let optionPath = \"activeSimulations/options/\" + String(newSimulationKey);\n    await databaseRef.update({\n      [optionPath]: name\n    });\n    await databaseRef.update({\n      [simulationPath]: data\n    });\n  });\n};\nexport const handleGrabActiveSimulation = sim => async dispatch => {\n  await databaseRef.child(\"activeSimulations/\" + sim).on(\"value\", snapshot => {\n    if (snapshot.val() !== null) {\n      dispatch({\n        type: GRAB_ACTIVE_SIMULATION,\n        data: snapshot.val()\n      });\n    } else {\n      dispatch({\n        type: GRAB_ACTIVE_SIMULATION,\n        data: {}\n      });\n    }\n  });\n};\nexport const handleGrabActiveSimulationOptions = () => async dispatch => {\n  await databaseRef.child(\"activeSimulations/options\").on(\"value\", snapshot => {\n    if (snapshot.val() !== null) {\n      dispatch({\n        type: GRAB_ACTIVE_SIMULATION_OPTIONS,\n        data: snapshot.val()\n      });\n    } else {\n      dispatch({\n        type: GRAB_ACTIVE_SIMULATION_OPTIONS,\n        data: {}\n      });\n    }\n  });\n};\nexport const handleDeleteTemplateSimulation = sim => async dispatch => {\n  await databaseRef.child(\"templateSimulations/\" + sim).remove();\n  await databaseRef.child(\"templateSimulations/options/\" + sim).remove();\n};\nexport const handleDeleteActiveSimulation = sim => async dispatch => {\n  await databaseRef.child(\"activeSimulations/\" + sim).remove();\n  await databaseRef.child(\"activeSimulations/options/\" + sim).remove();\n};","map":{"version":3,"sources":["C:/Users/dylan/source/repos/piplanning/src/actions/simulation.js"],"names":["databaseRef","GRAB_TEMPLATE_SIMULATION","GRAB_TEMPLATE_SIMULATION_OPTIONS","GRAB_ACTIVE_SIMULATION","GRAB_ACTIVE_SIMULATION_OPTIONS","handleGrabTemplateSimulation","sim","dispatch","child","on","snapshot","val","type","data","handleGrabTemplateSimulationOptions","handleNewTemplateSimulation","name","newSimulationKey","push","key","simulationPath","String","optionPath","update","handleNewActiveSimulation","once","then","activeName","handleGrabActiveSimulation","handleGrabActiveSimulationOptions","handleDeleteTemplateSimulation","remove","handleDeleteActiveSimulation"],"mappings":"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","sourcesContent":["import { databaseRef } from '../firebaseAPI';\r\nexport const GRAB_TEMPLATE_SIMULATION = 'GRAB_TEMPLATE_SIMULATION';\r\nexport const GRAB_TEMPLATE_SIMULATION_OPTIONS = 'GRAB_TEMPLATE_SIMULATION_OPTIONS';\r\nexport const GRAB_ACTIVE_SIMULATION = 'GRAB_ACTIVE_SIMULATION';\r\nexport const GRAB_ACTIVE_SIMULATION_OPTIONS = 'GRAB_ACTIVE_SIMULATION_OPTIONS';\r\n\r\nexport const handleGrabTemplateSimulation = (sim) => async dispatch => {\r\n    await databaseRef.child(\"templateSimulations/\" + sim).on(\"value\", (snapshot) => {\r\n        if (snapshot.val() !== null) {\r\n            dispatch({\r\n                type: GRAB_TEMPLATE_SIMULATION,\r\n                data: snapshot.val()\r\n            })\r\n        } else {\r\n            dispatch({\r\n                type: GRAB_TEMPLATE_SIMULATION,\r\n                data: {}\r\n            })\r\n        }\r\n    })\r\n}\r\n\r\nexport const handleGrabTemplateSimulationOptions = () => async dispatch => {\r\n    await databaseRef.child(\"templateSimulations/options\").on(\"value\", (snapshot) => {\r\n        if (snapshot.val() !== null) {\r\n            dispatch({\r\n                type: GRAB_TEMPLATE_SIMULATION_OPTIONS,\r\n                data: snapshot.val()\r\n            })\r\n        } else {\r\n            dispatch({\r\n                type: GRAB_TEMPLATE_SIMULATION_OPTIONS,\r\n                data: {}\r\n            })\r\n        }\r\n    })\r\n}\r\n\r\nexport const handleNewTemplateSimulation = (name) => async dispatch => {\r\n    let newSimulationKey = databaseRef.child(\"templateSimulations\").push().key;\r\n    let data = { name: name, key: newSimulationKey };\r\n\r\n    let simulationPath = \"templateSimulations/\" + String(newSimulationKey);\r\n    let optionPath = \"templateSimulations/options/\" + String(newSimulationKey);\r\n\r\n    await databaseRef.update({ [optionPath]: name });\r\n    await databaseRef.update({ [simulationPath]: data });\r\n}\r\n\r\nexport const handleNewActiveSimulation = (name, sim) => async dispatch => {\r\n    await databaseRef.child(\"templateSimulations/\" + sim).once('value').then(async function (snapshot) {\r\n        let data = snapshot.val();\r\n        data.activeName = name;\r\n        let newSimulationKey = databaseRef.child(\"activeSimulations\").push().key;\r\n        data.key = newSimulationKey;\r\n\r\n        let simulationPath = \"activeSimulations/\" + String(newSimulationKey);\r\n        let optionPath = \"activeSimulations/options/\" + String(newSimulationKey);\r\n\r\n        await databaseRef.update({ [optionPath]: name });\r\n        await databaseRef.update({ [simulationPath]: data });\r\n    })\r\n}\r\n\r\nexport const handleGrabActiveSimulation = (sim) => async dispatch => {\r\n    await databaseRef.child(\"activeSimulations/\" + sim).on(\"value\", (snapshot) => {\r\n        if (snapshot.val() !== null) {\r\n            dispatch({\r\n                type: GRAB_ACTIVE_SIMULATION,\r\n                data: snapshot.val()\r\n            })\r\n        } else {\r\n            dispatch({\r\n                type: GRAB_ACTIVE_SIMULATION,\r\n                data: {}\r\n            })\r\n        }\r\n    })\r\n}\r\n\r\nexport const handleGrabActiveSimulationOptions = () => async dispatch => {\r\n    await databaseRef.child(\"activeSimulations/options\").on(\"value\", (snapshot) => {\r\n        if (snapshot.val() !== null) {\r\n            dispatch({\r\n                type: GRAB_ACTIVE_SIMULATION_OPTIONS,\r\n                data: snapshot.val()\r\n            })\r\n        } else {\r\n            dispatch({\r\n                type: GRAB_ACTIVE_SIMULATION_OPTIONS,\r\n                data: {}\r\n            })\r\n        }\r\n    })\r\n}\r\n\r\nexport const handleDeleteTemplateSimulation = (sim) => async dispatch => {\r\n    await databaseRef.child(\"templateSimulations/\" + sim).remove();\r\n    await databaseRef.child(\"templateSimulations/options/\" + sim).remove();\r\n}\r\n\r\nexport const handleDeleteActiveSimulation = (sim) => async dispatch => {\r\n    await databaseRef.child(\"activeSimulations/\" + sim).remove();\r\n    await databaseRef.child(\"activeSimulations/options/\" + sim).remove();\r\n}"]},"metadata":{},"sourceType":"module"}