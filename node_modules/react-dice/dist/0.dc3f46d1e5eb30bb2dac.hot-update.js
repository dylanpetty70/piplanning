webpackHotUpdate(0,{

/***/ 78:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(79);

	var _react2 = _interopRequireDefault(_react);

	var _diceLogic = __webpack_require__(77);

	var _styles = __webpack_require__(110);

	var _Results = __webpack_require__(111);

	var _Results2 = _interopRequireDefault(_Results);

	var _DiceDisplay = __webpack_require__(112);

	var _DiceDisplay2 = _interopRequireDefault(_DiceDisplay);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Dice = function (_Component) {
		_inherits(Dice, _Component);

		function Dice() {
			_classCallCheck(this, Dice);

			return _possibleConstructorReturn(this, Object.getPrototypeOf(Dice).apply(this, arguments));
		}

		_createClass(Dice, [{
			key: 'componentWillMount',
			value: function componentWillMount() {
				if (this.props.dice) {
					this.setState({
						dice: (0, _diceLogic.rolls)(this.props.dice.rolls, this.props.dice.bonus)
					});
				} else {
					this.setState({
						dice: (0, _diceLogic.rolls)(this.props.rolls, this.props.bonus)
					});
				}
				this.updateDieCount = this.updateDieCount.bind(this);
				this.updateDieType = this.updateDieType.bind(this);
				this.updateBonus = this.updateBonus.bind(this);
				this.rollDice = this.rollDice.bind(this);
			}
		}, {
			key: 'updateDieCount',
			value: function updateDieCount(newValue, i) {
				var dice = this.state.dice;
				dice.rolls[i].dieCount = parseInt(newValue);
				this.setState({ dice: dice });
			}
		}, {
			key: 'updateDieType',
			value: function updateDieType(newValue, i) {
				var dice = this.state.dice;
				dice.rolls[i].dieType = parseInt(newValue);
				this.setState({ dice: dice });
			}
		}, {
			key: 'updateBonus',
			value: function updateBonus(newValue) {
				var dice = this.state.dice;
				dice.bonus = parseInt(newValue);
				this.setState({ dice: dice });
			}
		}, {
			key: 'rollDice',
			value: function rollDice() {
				var dice = this.state.dice;
				dice.get();
				this.setState({
					dice: dice,
					editRoll: -1
				});
			}
		}, {
			key: 'render',
			value: function render() {
				var _this2 = this;

				var dice = this.state.dice;

				return _react2.default.createElement(
					'div',
					{
						className: 'dieDisplay',
						style: {
							border: '1px solid #cccccc',
							background: '#e6e6e6',
							padding: '1px',
							paddingLeft: '5px',
							paddingRight: '5px',
							display: 'inline-block'
						}
					},
					dice.rolls.map(function (rollObj, i) {
						if (_this2.state.editRoll !== i) {
							return _react2.default.createElement(
								'span',
								{ key: i, onClick: function onClick() {
										_this2.setState({ editRoll: i });
									} },
								rollObj.dieCount + 'd' + rollObj.dieType + ' + '
							);
						}
						return _react2.default.createElement(_DiceDisplay2.default, {
							dieCount: rollObj.dieCount,
							dieType: rollObj.dieType,
							updateDieCount: _this2.updateDieCount,
							updateDieType: _this2.updateDieType,
							key: i,
							keyS: i
						});
					}),
					_react2.default.createElement('input', {
						type: 'number',
						value: dice.bonus,
						onChange: function onChange(e) {
							_this2.updateBonus(e.target.value);
						},
						style: _styles.inputStyle
					}),
					_react2.default.createElement(
						'button',
						{ onClick: this.rollDice },
						'Roll'
					),
					' Total: ',
					dice.lastRoll,
					_react2.default.createElement('br', null),
					this.props.showResults ? _react2.default.createElement(_Results2.default, { diceArray: dice.results }) : null
				);
			}
		}]);

		return Dice;
	}(_react.Component);

	module.exports = Dice;

/***/ }

})